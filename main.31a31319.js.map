{"version":3,"sources":["scripts/main.js"],"names":["board","score","rows","columns","goalNumber","startButton","document","querySelector","boardCells","querySelectorAll","totalScore","generateNewCell","emptyCells","row","col","push","length","Math","floor","random","updateCell","cellValue","cell","innerText","classList","value","add","toString","innerHTML","filterZero","filter","num","move","newRow","i","showMessage","areArraysEqual","a","b","JSON","stringify","moveLeft","moved","r","originalRow","moveRight","reverse","moveUp","column","originalColumn","moveDown","isGameOver","type","allMessage","message","forEach","el","remove","enableScroll","body","style","overflow","addEventListener","contains","e","key"],"mappings":"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","file":"main.31a31319.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nconst goalNumber = 2048;\n\nconst startButton = document.querySelector('.start');\nconst boardCells = document.querySelectorAll('.field-cell');\nconst totalScore = document.querySelector('.game-score');\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.innerHTML = 'Restart';\n    showMessage();\n\n    generateNewCell();\n    generateNewCell();\n    updateCell();\n  } else if (startButton.classList.contains('restart')) {\n    showMessage();\n\n    board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    score = 0;\n\n    generateNewCell();\n    generateNewCell();\n    updateCell();\n  }\n});\n\nfunction generateNewCell() {\n  const emptyCells = [];\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (!board[row][col]) {\n        emptyCells.push({\n          row, col,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const { row, col }\n      = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    board[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n}\n\nfunction updateCell() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      const cellValue = board[row][col];\n      const index = row * rows + col;\n      const cell = boardCells[index];\n\n      cell.innerText = '';\n      cell.classList.value = '';\n      cell.classList.add('field-cell');\n\n      if (cellValue > 0) {\n        cell.innerText = cellValue.toString();\n        cell.classList.add(`field-cell--${cellValue.toString()}`);\n      }\n    }\n  }\n\n  totalScore.innerHTML = score;\n}\n\ndocument.addEventListener('keydown', (e) => {\n  let moved = false;\n\n  switch (e.key) {\n    case 'ArrowRight':\n      moved = moveRight();\n      break;\n\n    case 'ArrowLeft':\n      moved = moveLeft();\n      break;\n\n    case 'ArrowUp':\n      moved = moveUp();\n      break;\n\n    case 'ArrowDown':\n      moved = moveDown();\n      break;\n\n    default:\n      break;\n  }\n\n  if (moved) {\n    generateNewCell();\n    updateCell();\n\n    if (isGameOver()) {\n      showMessage('lose');\n      enableScroll();\n    }\n  }\n});\n\nfunction filterZero(row) {\n  return row.filter((num) => num !== 0);\n}\n\nfunction move(row) {\n  let newRow = row;\n\n  newRow = filterZero(newRow);\n\n  for (let i = 0; i < newRow.length; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n\n    if (newRow[i] === goalNumber) {\n      showMessage('win');\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < rows) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction areArraysEqual(a, b) {\n  return JSON.stringify(a) === JSON.stringify(b);\n}\n\nfunction moveLeft() {\n  let moved = false;\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n    const originalRow = [...row];\n\n    row = move(row);\n    board[r] = row;\n\n    if (!moved && !areArraysEqual(originalRow, row)) {\n      moved = true;\n    }\n  }\n\n  return moved;\n}\n\nfunction moveRight() {\n  let moved = false;\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    const originalRow = [...row];\n\n    row.reverse();\n    row = move(row);\n\n    row.reverse();\n\n    board[r] = row;\n\n    if (!moved && !areArraysEqual(originalRow, row)) {\n      moved = true;\n    }\n  }\n\n  return moved;\n}\n\nfunction moveUp() {\n  let moved = false;\n\n  for (let col = 0; col < columns; col++) {\n    let column = [\n      board[0][col],\n      board[1][col],\n      board[2][col],\n      board[3][col],\n    ];\n\n    const originalColumn = [...column];\n\n    column = move(column);\n\n    for (let row = 0; row < rows; row++) {\n      board[row][col] = column[row];\n    }\n\n    if (!moved && !areArraysEqual(originalColumn, column)) {\n      moved = true;\n    }\n  }\n\n  return moved;\n}\n\nfunction moveDown() {\n  let moved = false;\n\n  for (let col = 0; col < columns; col++) {\n    let column = [\n      board[0][col],\n      board[1][col],\n      board[2][col],\n      board[3][col],\n    ];\n\n    const originalColumn = [...column];\n\n    column.reverse();\n    column = move(column);\n    column.reverse();\n\n    for (let row = 0; row < rows; row++) {\n      board[row][col] = column[row];\n    }\n\n    if (!moved && !areArraysEqual(originalColumn, column)) {\n      moved = true;\n    }\n  }\n\n  return moved;\n}\n\nfunction isGameOver() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (board[row][col] === 0) {\n        return false;\n      }\n\n      if (\n        (col < columns - 1 && board[row][col]\n          === board[row][col + 1])\n        || (row < rows - 1 && board[row][col]\n          === board[row + 1][col])\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction showMessage(type) {\n  const allMessage = document.querySelectorAll('.message');\n\n  if (!type) {\n    allMessage.forEach(el => el.classList.add('hidden'));\n\n    return;\n  }\n\n  const message = document.querySelector(`.message-${type}`);\n\n  allMessage.forEach(el => el.classList.add('hidden'));\n  message.classList.remove('hidden');\n}\n\nfunction enableScroll() {\n  document.body.style.overflow = 'auto';\n}\n"]}